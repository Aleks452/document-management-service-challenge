services:
  postgresql: # postgres configuration
    container_name: postgresql_container
    image: bitnami/postgresql:15.4.0
    ports:
      - "5432:5432"
    networks:
      - batch_network
    volumes:
      - challenge_postgresql_data:/bitnami/postgresql
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=challenge
      - POSTGRESQL_POSTGRES_PASSWORD=${POSTGRESQL_POSTGRES_PASSWORD} # Password of user "postgres"
    
  app:
    build: #sping configuration to deploy
      context: ..
      dockerfile: Dockerfile  
    container_name: app_container
    ports:
      - "8080:8080"
    depends_on:
      - postgresql
      - minio
    networks:
      - batch_network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/challenge
      SPRING_DATASOURCE_USERNAME: ${POSTGRESQL_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRESQL_PASSWORD}
      MINIO_URL: http://host.docker.internal:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}  
  
  minio: #minio configuration
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"  # API S3
      - "9001:9001"  # MinIO Web Console
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server --console-address ":9001" /data
    volumes:
      - challenge_minio_data:/data
    networks:
      - batch_network

#  document-management-service:
#    image: app_container
#    container_name: document-management-service
#    environment:
#      - JAVA_OPTS=-Xmx50m -Xms50m
#    deploy:
#      resources:
#        limits:
#          memory: 50M  
#    networks:
#      - batch_network

volumes:
  challenge_postgresql_data:
    driver: local
  challenge_minio_data:
    driver: local

networks:
  batch_network:
    driver: bridge
